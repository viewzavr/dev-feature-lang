/*
  gen-object "type"
  
  output - js-запись о новом объекте с фичей type
*/
feature "gen-object" "
env.onvalue(0,(tname) => {
  let r = { params: {}, children: {}, features: {}, manual: true, name_is_autogenerated: true };
  r.features[tname] = true;
  env.setParam( 'output', r )
})
"

/*
  gen-object "some" | add-params alfa=5 beta=8 | add-params sigma=4
  =>
  object alfa=5 beta=8 sigma=4
*/
feature "add-params" "
  function pass_params(input) {
    if (!input) {
      env.setParam('output',null)
      return;
    }
    let output = JSON.parse( JSON.stringify( input )) // todo optimize
    for (let k of Object.keys( env.params )) {
      if (k == 'input' || k == 'args_count' || k == 'output') continue;
      output.params[k] = env.params[k];
      // todo удалять исчезнувшие..
    }
    env.setParam( 'output', output )
  }
  pass_params( env.params.input )
  env.on('param_changed', (pname) => { if (pname != 'output') pass_params( env.params.input ) } )
"

/*
  gen-object "some" | add-child (gen-object "other" | add-params teta=5) "c1"
  =>
  some {
    c1: other teta=5
  }
  
  todo: add-children массив детей. вопрос с именами.
*/

feature "add-child" "
  // todo вопрос а если c стало undefined нас вызовут?
  env.onvalues_any( ['input',0,1],(input,c,cname) => {

    if (!input || !c) {
      env.setParam('output',null)
      return;
    }
    let output = JSON.parse( JSON.stringify( input || '' )) // todo optimize

    if (!cname) cname = 'ac_item';
    while (output.children[ cname ])
      cname = cname + '_y';
    // console.log('computed cname=',cname, 'c=',c)
    output.children[ cname ] = c
    env.setParam( 'output', output )
  })
"